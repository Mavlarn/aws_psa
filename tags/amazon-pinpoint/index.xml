<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Amazon Pinpoint on AWS China Partner Workshop</title><link>/tags/amazon-pinpoint/</link><description>Recent content in Amazon Pinpoint on AWS China Partner Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 14 Nov 2022 10:05:51 +0800</lastBuildDate><atom:link href="/tags/amazon-pinpoint/index.xml" rel="self" type="application/rss+xml"/><item><title>在纯JS应用中使用 Amazon Pinpoint 的 Analytics 用户行为分析</title><link>/pinpoint/using-pinpoint-event-analytics-in-plain-js-webapp/</link><pubDate>Mon, 14 Nov 2022 10:05:51 +0800</pubDate><guid>/pinpoint/using-pinpoint-event-analytics-in-plain-js-webapp/</guid><description>Amazon Pinpoint 用户行为分析 Amazon Pinpoint 的其中一个功能是收集客户端的用户行为，并发送到 AWS Pinpoint 服务中进行汇总分析，并结合动态 Segment 实现用户圈选，以及出发用户旅程（Journey），从而实现自动化的营销功能。
Pinpoint Analytics 使用 要使用 Pinpoint Analytics 的用户行为分析功能，我们需要在前端页面或者 App 中，使用相应的 JS 库注册当前用户，并对用户的行为埋点，即记录用户事件。我们有两种方式来使用 JS 库实现埋点。
使用 Pinpoint JS Sdk。这种方式跟大部分 JS 库的使用类似，就是引入该JS库，在 JS 中初始化 Pinpoint Client，初始化时需要传递认证信息。这样就能在页面中通过 JS 库调用 Pinpoint 的 API 实现各种功能，包括记录事件、创建Segment、Campaign等。 使用 Amplify 工具。Amplify 是一系列命令行工具和 JS 库的集合。使用 Amplify，我们可以通过命令行来给我们现有的前端应用添加 AWS 服务，并通过提供的 Amplify 库与后端的 AWS 服务进行交互。例如访问后端的 S3 文件存储服务，DynamoDB 数据库，API Gateway 等等。 在本文中，我们就介绍如何使用 Amplify 来为我们的前端应用 添加用户分析的功能，并通过用户属性和 Pinpoint 的 Segment 功能，实现动态圈选用户。
实现 场景介绍和前提 本文中，假设我们有一个前端页面是纯 JS 的应用，比如只使用了 JQuery 之类的库实现了前端交互。同时，这样的前端应用往往不会使用 NPM 这样的JS 库依赖管理功能，所以我们希望将 JS 库以及 初始化的方法打包好，在每个页面的 script 标签中引入这个包，然后使用 Pinpoint Analytics 的方法来记录事件。</description></item><item><title>使用 Amazon Pinpoint 的Custom Channel给用户发送 Whatsapp 消息</title><link>/pinpoint/customer-engagement-using-amazon-pinpoint-custom-channel/</link><pubDate>Wed, 09 Nov 2022 10:05:51 +0800</pubDate><guid>/pinpoint/customer-engagement-using-amazon-pinpoint-custom-channel/</guid><description>Amazon Pinpoint 用户触达 Amazon Pinpoint 通常用来通过 SMS 以及邮件的方式来给用户发通知，我们可以创建 Campaign，来动态的给圈选的用户在指定的时间、或某个事件发生的情况下，给用户发送指定模板的消息。更复杂的，我们还可以创建用户旅程的流程，来给用户发消息。
除了 SMS 和邮件，Pinpoint 还提供了 Push-notification，in-app messaging 的消息，我们甚至还可以通过 Lambda 还创建自定义的消息渠道。本文我们就来看一下如何使用 Lambda 创建自定义的渠道（custom channel）并使用它来发送消息给用户。
场景描述和前提 本文中，我们希望给用户的 Whatsapp 账号发送消息，实现原理实际上就是在 Lambda 函数内通过调用 Whatsapp 的 API 来发消息。这就需要几个前提：
创建并配置 Whatsapp Whatsapp 是 Facebook 旗下的产品，它提供 Business Platform API，可以用来直接发送 WhatsApp 消息，而无需通过类似 Twilio 这样的服务。开通和配置的过程不是本文的内容，这里就不做说明。我们需要能够通过 API 调用来发消息。配置完成后，可以同下面的页面来测试：
它通过临时的 Token 使用 API 发消息；这里的 Phone number ID 是我们的注册的 Business 账号下使用的电话的 Id；To 就是我们要发送消息的对象。
发送消息后，我们就可以在网页版的 WhatsApp 应用，或手机应用上看到收到的测试消息。
验证消息接收无误以后，就可以使用 API 调用发送消息了。
获取 app token 从上面的测试接口页面，我们可以知道测试接口需要几个参数：
token： 即 Facebook app token，在 Facebook business platform 创建，需要保证这个token具有 WhatsApp api的权限。 Phone number ID：即发消息的账号的Id。 创建 template 根据 WhatsApp 的机制，我们需要先创建一个消息模板，然后使用该模板发送消息。所以我们需要创建一个 template：</description></item></channel></rss>